1.animation-timing-function: steps(1, start);
第一个参数1：表示两帧动画间执行的次数
第二个参数start：指定在每个间隔的起点或是终点发生阶跃变化

@-webkit-keyframes person-slow {
        0% { background-position: -0px -0px;}
        100% { background-position: -0px -100px; }
    }

如果第一个参数为 2，第二个参数为 start，那么 0% - 100% 为有两次动画
第一次为 0% { background-position: -0px -0px;}
第一次为 50% { background-position: -0px -50px;}

2.jQuery - css() 方法
设置相应 css 属性，不改变其他属性

3.$(function() {})
即$(document).ready(function()
DOM加载完毕之后执行。

4.或运算 ||
(1)var a = 1 || 2 , a = 1
(2)var a = 2 || 1 , a = 2
(3)var a = 0 || 3 , a = 3

在（1）中，判断或运算时，在 1 时为 true，返回 1
在（2）中，判断或运算时，在 2 时为 true，返回 2
在（3）中，判断或运算时，在 0 时为 false，接着判断后面的 3，为true，返回 3

5.JS 加载执行顺序
对于一个HTML文档，浏览器的解析顺序为：按照文档流，从上到下逐步解析页面的结构。JavaScript代码作为通过标签嵌入或引入的脚本，也HTML文档的组成部分。因此，JavaScript代码在装载时的执行顺序也是根据脚本标签<script>的出现顺序来确定的。

但是，浏览器加载JavaScript时有个特点，那就是载入之后立即就会执行（先编译后执行），因为JavaScript可能会影响DOM树的结构，所以浏览器在执行完后才能继续加载下面的HTML内容。也就是说，浏览器下载并执行JavaScript的过程会阻塞DOM树的继续建立。所以，引入的多个js文件，会按顺序分开执行。同样的，对于不同<script>标签嵌入的JavaScript代码，也会分开执行。同一组<script>标签包括的代码就是一个代码块。后引入的JavaScript文件可以调用先引入的JavaScript文件的资源，下面的代码块可以访问上面代码块的资源，反之则不行。

由于JavaScript通常需要操作DOM，所以，一般把JavaScript放在</body>前或者文档结尾处引入。若需要在<head>中引入，可以通过修改window.onload或者document.ready事件，强制等到DOM加载完成后再执行相关函数。


6. Promise 概念
Promise规范如下：
一个promise可能有三种状态：等待（pending）、已完成（fulfilled）、已拒绝（rejected）
一个promise的状态只可能从“等待”转到“完成”态或者“拒绝”态，不能逆向转换，同时“完成”态和“拒绝”态不能相互转换
promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致
then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象。
